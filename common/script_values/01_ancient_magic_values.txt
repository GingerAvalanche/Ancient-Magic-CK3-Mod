# No-brainer value in a magic mod.
# Uses - Is a character even possibly a mage? 'mage_potency > 0' Is the character not a mage? 'mage_potency < 1' How much potential does this mage have? 'mage_potency >= x'
mage_potency = {
	value = 0
	if = { limit = { has_trait = magic_potential_1 } value = 1 } 
	else_if = { limit = { has_trait = magic_potential_2 } value = 2 } 
	else_if = { limit = { has_trait = magic_potential_3 } value = 3 }
}

# No-brainer value in a magic mod.
# Uses - Is a character even possibly educated? 'mage_education > 0' Is the character not educated? 'mage_education < 1' How much education does this mage have? 'mage_education >= x'
mage_education = { # UNCOMMENT WHEN SYSTEM IN PLACE!!!
	value = 0
	if = { limit = { has_trait = education_arcane_1 } value = 1 } 
	else_if = { limit = { has_trait = education_arcane_2 } value = 2 } 
	else_if = { limit = { has_trait = education_arcane_3 } value = 3 }
	else_if = { limit = { has_trait = education_arcane_4 } value = 4 }
}

mage_level = {
	value = var:mage_xp
	if = {
		limit = { has_trait = magic_potential_1 }
		divide = 150
	}
	else_if = {
		limit = { has_trait = magic_potential_2 }
		divide = 100
	}
	else_if = {
		limit = { has_trait = magic_potential_3 }
		divide = 75
	}
	add = 1
	floor = yes
}

mage_xp_per_perk = 15

max_mana_per_perk = 30

mana_gen_per_perk = 3

arcana_mage_xp_per_perk = {
	value = mage_xp_per_perk
	multiply = 2
}

arcana_max_mana_per_perk = {
	value = max_mana_per_perk
	multiply = 2
}

arcana_mana_gen_per_perk = {
	value = mana_gen_per_perk
	multiply = 2
}

mage_xp_to_next_level = {
	value = mage_level
	add = 1
	if = { limit = { mage_potency = 1 } multiply = 150 } 
	if = { limit = { mage_potency = 2 } multiply = 100 } 
	if = { limit = { mage_potency = 3 } multiply = 75 }
	#subtract = var:mage_xp
}

# Note: This value is a work-around for 'consume life' not giving the 'drained' modifier
# 	    for the correct number of years. Removing it will break that spell!
############################################################################################
mage_level_value_conversion = {
	value = 0
	if = {
		limit = {
			exists = scope:am_spell_caster
		}
		add = scope:am_spell_caster.mage_level
	}
}

# Note: The following values are here to stream-line the scripting for the 'manipulate blood'
#       spell. Removing them will break that spell!
############################################################################################
# Used to gauge character's beauty level for biomancy spell
am_beauty_level = {
	value = 0
	if = {
		limit = {
			has_trait = beauty_good
		}
		if = {
			limit = {
				has_trait = beauty_good_1
			}
			add = 1
		}
		else_if = {
			limit = {
				has_trait = beauty_good_2
			}
			add = 2
		}
		else_if = {
			limit = {
				has_trait = beauty_good_3
			}
			add = 3
		}
	}
	else_if = {
		limit = {
			has_trait = beauty_bad
		}
		if = {
			limit = {
				has_trait = beauty_bad_1
			}
			subtract = 1
		}
		else_if = {
			limit = {
				has_trait = beauty_bad_2
			}
			subtract = 2
		}
		else_if = {
			limit = {
				has_trait = beauty_bad_3
			}
			subtract = 3
		}
	}
}

# Used to gauge character's physique level for biomancy spell
am_physique_level = {
	value = 0
	if = {
		limit = {
			has_trait = physique_good
		}
		if = {
			limit = {
				has_trait = physique_good_1
			}
			add = 1
		}
		else_if = {
			limit = {
				has_trait = physique_good_2
			}
			add = 2
		}
		else_if = {
			limit = {
				has_trait = physique_good_3
			}
			add = 3
		}
	}
	else_if = {
		limit = {
			has_trait = physique_bad
		}
		if = {
			limit = {
				has_trait = physique_bad_1
			}
			subtract = 1
		}
		else_if = {
			limit = {
				has_trait = physique_bad_2
			}
			subtract = 2
		}
		else_if = {
			limit = {
				has_trait = physique_bad_3
			}
			subtract = 3
		}
	}
}

# Used to gauge character's intellect level for biomancy spell
am_intellect_level = {
	value = 0
	if = {
		limit = {
			has_trait = intellect_good
		}
		if = {
			limit = {
				has_trait = intellect_good_1
			}
			add = 1
		}
		else_if = {
			limit = {
				has_trait = intellect_good_2
			}
			add = 2
		}
		else_if = {
			limit = {
				has_trait = intellect_good_3
			}
			add = 3
		}
	}
	else_if = {
		limit = {
			has_trait = intellect_bad
		}
		if = {
			limit = {
				has_trait = intellect_bad_1
			}
			subtract = 1
		}
		else_if = {
			limit = {
				has_trait = intellect_bad_2
			}
			subtract = 2
		}
		else_if = {
			limit = {
				has_trait = intellect_bad_3
			}
			subtract = 3
		}
	}
}

# Used to determine if anything else can be done.
am_genetic_level = {
	value = am_beauty_level
	add = am_physique_level
	add = am_intellect_level
}
#############################################################################################